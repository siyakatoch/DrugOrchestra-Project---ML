import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Load the dataset
file_path = r'C:/Users/siyak/Downloads/data/gdsc/data.npy'  # Corrected file path
data = np.load(file_path, allow_pickle=True)  # assuming the data is saved with allow_pickle=True

# If the dataset contains labels, separate features and target
X = data[:, :-1]  # Assuming the last column is the target variable
y = data[:, -1]   # Assuming the last column is the target variable

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Specify the number of components for PCA
n_components = 10  # You can adjust this as needed

# Perform PCA
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

# Initialize linear regression model
model = LinearRegression()

# Perform 3-fold cross-validation using Mean Absolute Error (MAE) as the evaluation metric
cv_scores = cross_val_score(model, X_pca, y, cv=3, scoring='neg_mean_absolute_error')

# Print cross-validated MAE scores
print("Cross-validated MAE scores:", -cv_scores)  # Negate scores because cross_val_score returns negative MAE by default


import numpy as np
from sklearn.model_selection import cross_val_predict
from sklearn.linear_model import LinearRegression
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from scipy.stats import spearmanr

# Load the dataset
file_path = r'C:/Users/siyak/Downloads/data/gdsc/data.npy'
data = np.load(file_path, allow_pickle=True)

# Separate features and target
X = data[:, :-1]
y = data[:, -1]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Specify the number of components for PCA
n_components = 10
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

# Initialize linear regression model
model = LinearRegression()

# Perform 3-fold cross-validation predictions
y_pred = cross_val_predict(model, X_pca, y, cv=3)

# Calculate Spearman correlation coefficient
scc, _ = spearmanr(y, y_pred)
print("Spearman correlation coefficient:", scc)

