import numpy as np
from sklearn.model_selection import KFold, cross_val_score, cross_val_predict
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from scipy.stats import spearmanr

# Load the dataset
file_path = r'C:/Users/siyak/Downloads/data/gdsc/data.npy'
data = np.load(file_path, allow_pickle=True)

# Separate features and target
X = data[:, :-1]
y = data[:, -1]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Specify the number of components for PCA
n_components = 10
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

# Initialize linear regression model
model_lr = LinearRegression()

# Define the number of folds
n_splits = 3

# Initialize arrays to store results
mae_scores = []
spearman_correlations = []

# Perform 3 k-fold cross-validation for linear regression model
kf = KFold(n_splits=n_splits)
for train_index, test_index in kf.split(X_pca):
    X_train, X_test = X_pca[train_index], X_pca[test_index]
    y_train, y_test = y[train_index], y[test_index]
    
    # Fit the linear regression model
    model_lr.fit(X_train, y_train)
    
    # Predict using the linear regression model
    y_pred_lr = model_lr.predict(X_test)
    
    # Calculate mean absolute error
    mae = mean_absolute_error(y_test, y_pred_lr)
    mae_scores.append(mae)

    # Calculate Spearman correlation coefficient
    scc, _ = spearmanr(y_test, y_pred_lr)
    spearman_correlations.append(scc)

# Calculate mean MAE score
mean_mae = np.mean(mae_scores)
print("Mean MAE score:", mean_mae)

# Calculate mean Spearman correlation coefficient
mean_scc = np.mean(spearman_correlations)
print("Mean Spearman correlation coefficient:", mean_scc)
