import numpy as np
from sklearn.model_selection import KFold, cross_val_score
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from scipy.stats import spearmanr

# Load the dataset
file_path = r'C:/Users/siyak/Downloads/data/CCLE/data.npy'
data = np.load(file_path, allow_pickle=True)

# Separate features and target
X = data[:, :-1]
y = data[:, -1]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Specify the number of components for PCA
n_components = 10
pca = PCA(n_components=n_components)
X_pca = pca.fit_transform(X_scaled)

# Initialize KNN model for regression
model_knn = KNeighborsRegressor(n_neighbors=3)

# Define the number of folds
n_splits = 3

# Initialize arrays to store results
mse_scores = []
spearman_correlations = []

# Perform 3 k-fold cross-validation for KNN regression model
kf = KFold(n_splits=n_splits)
for train_index, test_index in kf.split(X_pca):
    X_train, X_test = X_pca[train_index], X_pca[test_index]
    y_train, y_test = y[train_index], y[test_index]
    
    # Fit the KNN regression model
    model_knn.fit(X_train, y_train)
    
    # Predict using the KNN regression model
    y_pred_knn = model_knn.predict(X_test)
    
    # Calculate mean squared error
    mse = np.mean((y_test - y_pred_knn)**2)
    mse_scores.append(mse)

    # Calculate Spearman correlation coefficient
    scc, _ = spearmanr(y_test, y_pred_knn)
    spearman_correlations.append(scc)

# Print cross-validated MSE scores
print("Cross-validated MSE scores:", mse_scores)

# Calculate mean Spearman correlation coefficient
mean_scc = np.mean(spearman_correlations)
print("Mean Spearman correlation coefficient:", mean_scc)
